import getConfig from "next/config";
import Image from "next/image";
import { useEffect, useState } from "react";
import { Configuration, OpenAIApi, CreateImageRequestSizeEnum } from "openai";
import imageIcon from "../assets/imageIcon.png";
import "./App.css";

const displayImageSize = (imageSize: CreateImageRequestSizeEnum) =>
  imageSize.replace("x", " x ");

const defaultImageSize: CreateImageRequestSizeEnum = "1024x1024";

export default function App() {
  const [imageResult, setImageResult] = useState("");
  const [textPrompt, setTextPrompt] = useState("");
  const [promptError, setPromptError] = useState<string | undefined>();
  const [selectedImageSize, setSelectedImageSize] = useState(defaultImageSize);
  const [loading, setLoading] = useState(false);

  const { publicRuntimeConfig } = getConfig();
  const apiKey =
    typeof publicRuntimeConfig !== "undefined" && publicRuntimeConfig.apiKey
      ? publicRuntimeConfig.apiKey
      : process.env.API_KEY;

  if (!apiKey) {
    throw new Error("apiKey is not defined");
  }

  const configuration = new Configuration({ apiKey });
  const openai = new OpenAIApi(configuration);

  const generateImage = async () => {
    if (!textPrompt?.length) {
      setPromptError("Please add your description. It's required.");
      return;
    }

    setLoading(true);

    setTimeout(() => {
      setLoading(false);
      setImageResult(
        "https://oaidalleapiprodscus.blob.core.windows.net/private/org-vlaWMOf9DQoKKX0PkXCBPwgR/user-MEP4wZ1uPHbxJmXj5jVL0cHe/img-gCiBT1u8CqcHTOJACHawDVf3.png?st=2023-05-05T12%3A43%3A38Z&se=2023-05-05T14%3A43%3A38Z&sp=r&sv=2021-08-06&sr=b&rscd=inline&rsct=image/png&skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2023-05-05T04%3A48%3A59Z&ske=2023-05-06T04%3A48%3A59Z&sks=b&skv=2021-08-06&sig=gFJzwEFNwSu/OT10epNGLp9iCeW3Ka%2BMeSboG/6u62I%3D"
      );
    }, 3000);

    // try {
    //   const response = await openai.createImage({
    //     prompt: textPrompt, // maxLength: 1000 characters
    //     n: 1, // 1-10, default: 1
    //     size: selectedImageSize, // 256x256, 512x512 or 1024x1024, default: 1024x1024
    //   });

    //   const imageData = response.data;
    //   const imageUrl = imageData.data[0].url;
    //   console.log("imageUrl: ", imageUrl);

    //   setImageResult(imageUrl || "");
    //   setLoading(false);
    // } catch (error) {
    //   console.log(error);
    //   setLoading(false);
    // }
  };

  const onTextPromptChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    if (promptError) {
      setPromptError(undefined);
    }

    setTextPrompt(e.target.value);
  };

  return (
    <div className="app">
      <h1>Create images with your mind and DALL-E</h1>
      <div className="text-prompt">
        <label htmlFor="prompt-input">
          Describe the image, use as much details as you like:
        </label>
        <textarea
          id="prompt-input"
          className={promptError ? "has-error" : ""}
          placeholder="Happy pink elephant riding bicycle on a stone path"
          disabled={loading}
          value={textPrompt}
          onChange={onTextPromptChange}
        />
        <div className="error-message">
          {promptError ? "Please add your description. It's required." : ""}
        </div>
      </div>
      <select
        disabled={loading}
        value={selectedImageSize}
        onChange={(e) =>
          setSelectedImageSize(e.target.value as CreateImageRequestSizeEnum)
        }
      >
        {Object.values(CreateImageRequestSizeEnum).map((value) => {
          return (
            <option key={value} value={value}>
              {displayImageSize(value)}
            </option>
          );
        })}
      </select>
      <button onClick={generateImage} disabled={loading}>
        Generate Image
      </button>
      {loading ? (
        <div className="loading-ripple">
          <div></div>
          <div></div>
        </div>
      ) : imageResult.length ? (
        <div className="result-wrapper">
          <Image
            className="result-image"
            src={imageResult}
            alt="Image generated by AI"
            width={300}
            height={300}
          />
          <div className="source">
            Generated by <a href="https://openai.com/">OpenAI</a>
          </div>
        </div>
      ) : (
        <Image
          className="image-icon"
          src={imageIcon}
          alt="Image placeholder"
          width={256}
          height={256}
          priority
        />
      )}
    </div>
  );
}
